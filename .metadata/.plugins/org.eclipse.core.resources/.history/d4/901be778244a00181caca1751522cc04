import java.util.Random;

import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import javafx.scene.paint.Color;
import javafx.scene.shape.Rectangle;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.util.Duration;

/**Represent the Tetris GameBoard that creates a fully functional MineSweeper game.
*
*@author Wenhao Lin
*@author RuiJie Xu
*@since 2018-04-25 
*/
public class TetrisBoard extends BorderPane{
	int score;
	int shape = 0;
	boolean hasSpace = true;
	public Timeline timeline = new Timeline();
	int row = 18;
	int col = 10;
	TetrisBox[][] board;
	
	//for later tool bar
	VBox scoreBoard = new VBox();	
	//main game board
	GridPane gameBoard = new GridPane();
	
	/**
     * Construct an object instance of the TetrisBoard class.
     */
		public TetrisBoard() {
			gameBoard.setGridLinesVisible(true);
			board = new TetrisBox[row][col];//polymorphism
			//add box to the gameBoard
			for(int i = 0; i <row; i++) {
				for(int j= 0 ; j <col; j++) {
					TetrisBox box = new TetrisBox();
					board[i][j] = box;
					box.paint();
					gameBoard.add(box,j,i);//add square to gameBoard one by one
				}//for
			}//for
		
			
		//set the gameboard to the middle of the pane	
		setCenter(gameBoard);
		//call to make a newshape object before star
		//newShape();
		
 		}//TetrisBoard
	
		public void newShape() {	
			Random r = new Random();
			int shape = r.nextInt(7) + 1;
			this.shape = shape;
			
			//create the shape that correspond to the random number
			switch(shape) {
			case 1:
					for(int i = 3; i < 7; i++) {
						if(board[0][i].hasBox==true) lose();//check for game over
						board[0][i].liveBox=true;//set true
						board[0][i].hasBox = true;
						board[0][i].shapeNum=1;//set color code
						board[0][i].paint();//show
					}//for
					setCenter(gameBoard);
					break;
			case 2:
					for(int i = 3; i < 6; i++) {
						//check for game over
						if(board[0][i].hasBox==true) lose();
						board[0][i].liveBox=true;//set true
						board[0][i].hasBox=true;
						board[0][i].shapeNum=2;//set color code
					}//for
					//check for game over
					if(board[0][5].hasBox==true) lose();
					board[1][5].liveBox=true;//set true
					board[1][5].shapeNum=2;//set color code
					setCenter(gameBoard);
					break;
			case 3:
					for(int i = 3; i < 6; i++) {
						//check for game over
						if(board[0][i].hasBox==true) lose();
						board[0][i].liveBox=true;//set true
						board[0][i].hasBox=true;
						board[0][i].shapeNum=3;//set color code
					}//for
					//check for game over
					if(board[1][3].hasBox==true) lose();
					board[1][3].hasBox=true;
					board[1][3].liveBox=true;
					board[1][3].shapeNum=3;
					setCenter(gameBoard);
					break;
			case 4:
					for(int i =0; i <2; i++) {
						for(int j=4; j<6; j++) {
							//check for game over
							if(board[i][j].hasBox==true) lose();
							board[i][j].hasBox=true;
							board[i][j].liveBox=true;
							board[i][j].shapeNum=4;
						}//for
					}//for
					setCenter(gameBoard);
					break;
			case 5:
					for(int i=4; i<6; i++) {
						//check for game over
						if(board[0][i].hasBox=true) lose();
						board[0][i].hasBox=true;
						board[0][1].liveBox=true;
						board[0][i].shapeNum=5;
					}//for
					for(int i=3; i<5; i++) {
						//check for game over
						if(board[1][i].hasBox==true) lose();
						board[1][i].hasBox=true;
						board[1][i].liveBox=true;
						board[1][i].shapeNum=5;
					}//for
					setCenter(gameBoard);
					break;
			case 6:
				for(int i = 3; i < 6; i++) {
					//check for game over
					if(board[0][i].hasBox==true) lose();
					board[0][i].hasBox=true;
					board[0][i].liveBox=true;
					board[0][i].shapeNum=6;
				}//for
				//check for game over
				if(board[1][4].hasBox==true) lose();
				board[1][4].liveBox=true;
				board[1][4].hasBox=true;
				board[1][4].shapeNum=6;
				setCenter(gameBoard);
				break;
			case 7:
				for(int i=3; i<5; i++) {
					//check for game over
					if(board[0][i].hasBox==true) lose();
					board[0][i].hasBox=true;
					board[0][i].liveBox=true;
					board[0][i].shapeNum=7;
				}//for
				for(int i=4; i<6; i++) {
					//check for game over
					if(board[1][i].hasBox==true) lose();
					board[1][i].hasBox=true;
					board[1][i].liveBox=true;
					board[1][i].shapeNum=7;
				}//for
				setCenter(gameBoard);
				break;
			}//switch
		}//newShape
	
	
	
	private void lose() {
			System.out.println("You lose");
			
		}//lose



	//Box Class represent individual square
	public class TetrisBox extends Rectangle{
		public int shapeNum = 0;//shape corresponding number
		public boolean liveBox = false;//whether the box is movable
		public boolean hasBox = false;
		
		TetrisBox(){
			super(45,45);//set dimension
			
			setStroke(Color.BLACK);
		}//Constructor
		
		public void paint() {
			
			switch(shapeNum) {
			case 0:
				setFill(Color.LAVENDER);
				break;
			case 1:
				setFill(Color.CYAN);
				break;
			case 2:
				setFill(Color.BLUE);
				break;
			case 3:
				setFill(Color.ORANGE);
				break;
			case 4:
				setFill(Color.YELLOW);
				break;
			case 5:
				setFill(Color.GREEN);
				break;
			case 6:
				setFill(Color.PURPLE);
				break;
			case 7:
				setFill(Color.RED);
				break;
			}//switch
		}//paint
	}//TetrisBox


}//TetrisBoard